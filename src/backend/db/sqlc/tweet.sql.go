// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tweet.sql

package db

import (
	"context"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO tweets (user_id, post)
VALUES ($1, $2)
RETURNING id, user_id, post, favorites, replies, retweets, created_at, updated_at
`

type CreateTweetParams struct {
	UserID int64  `json:"user_id"`
	Post   string `json:"post"`
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.UserID, arg.Post)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Post,
		&i.Favorites,
		&i.Replies,
		&i.Retweets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTweet = `-- name: GetTweet :one
SELECT id, user_id, post, favorites, replies, retweets, created_at, updated_at
FROM tweets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTweet(ctx context.Context, id int64) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, getTweet, id)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Post,
		&i.Favorites,
		&i.Replies,
		&i.Retweets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsersTweets = `-- name: ListUsersTweets :many
SELECT id, user_id, post, favorites, replies, retweets, created_at, updated_at
FROM tweets
WHERE user_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListUsersTweetsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsersTweets(ctx context.Context, arg ListUsersTweetsParams) ([]Tweet, error) {
	rows, err := q.db.QueryContext(ctx, listUsersTweets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tweet{}
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Post,
			&i.Favorites,
			&i.Replies,
			&i.Retweets,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
